#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E      &kp R         &kp T                               &kp UP                &kp Y  &kp U          &kp I        &kp O    &kp P     &kp EQUAL
&kp TAB    &kp A  &kp S  &kp D      &kp F         &kp G                     &kp LEFT  &kp ENTER  &kp RIGHT  &kp H  &kp J          &kp K        &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C      &kp V         &kp B        &kp SPACE              &kp DOWN              &kp N  &kp M          &kp COMMA    &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                         &kp LCTRL  &kp LEFT_ALT  &lt 1 SPACE                                               &mo 1  &kp BACKSPACE  &lt 2 ENTER
            >;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&kp TILDE        &kp N1  &kp N2  &kp N3            &kp N4  &kp N5                            &mmv MOVE_UP                     &kp N6    &kp N7    &kp N8     &kp N9         &kp N0            &kp PIPE
&mo 2            &trans  &trans  &trans            &trans  &trans            &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp HOME  &kp UP    &kp END    &kp PAGE_UP    &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp RIGHT_SHIFT  &trans  &trans  &trans            &trans  &trans  &trans                    &mmv MOVE_DOWN                   &kp LEFT  &kp DOWN  &kp RIGHT  &kp PAGE_DOWN  &kp TILDE         &kp RIGHT_SHIFT
                                 &kp LANG_HANGEUL  &trans  &trans                                                             &trans    &kp DEL   &mo 2
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "SYMBOL";
            bindings = <
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                            &mmv MOVE_UP                     &kp F6   &kp F7  &kp F8  &kp F10  &kp F11   &kp F12
&trans  &trans  &trans  &trans  &trans  &trans            &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &none    &none   &none   &none    &kp BSLH  &kp GRAVE
&trans  &none   &none   &none   &none   &none   &trans                    &mmv MOVE_DOWN                   &none    &none   &none   &none    &kp PIPE  &kp TILDE
                        &none   &none   &none                                                              &kp RET  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };
    };
};
